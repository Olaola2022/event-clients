import * as Redis from 'redis';
export declare class EventBus {
    private static _eventBusInstances;
    private readonly _pub;
    private readonly _sub;
    private readonly _name;
    private readonly _prefix;
    private constructor();
    private init();
    on<T>(event: string, callback: (payload: T) => void): Promise<void>;
    private _on<T>(event, callback, internalCall?);
    emit<T>(event: string, payload: T): void;
    private _emit<T>(event, payload, internalCall?);
    ping(timeout?: number, minResponseCount?: number): Promise<boolean>;
    destory(): void;
    readonly connected: boolean;
    private removePrefixFromChannelName(channel);
    private getPrefixedChannelName(channel);
    private isReservedEventName(event);
    static create(name: string, clientOpts?: Redis.ClientOpts): Promise<EventBus>;
    static getByName(name: string): EventBus;
}
